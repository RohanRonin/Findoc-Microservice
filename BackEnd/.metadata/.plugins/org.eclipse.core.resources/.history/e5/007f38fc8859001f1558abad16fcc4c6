package com.AppDev.FinDoc.service.impl;

import com.AppDev.FinDoc.dto.DoctorProfileDTO;
import com.AppDev.FinDoc.entity.DoctorProfile;
import com.AppDev.FinDoc.mapper.DoctorProfileMapper;
import com.AppDev.FinDoc.repository.DoctorProfileRepository;
import com.AppDev.FinDoc.service.DoctorProfileService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.util.stream.Collectors;

@Service
public class DoctorProfileServiceImpl implements DoctorProfileService {

    @Autowired
    private DoctorProfileRepository doctorProfileRepository;

    @Autowired
    private DoctorProfileMapper doctorProfileMapper;

    @Override
    public DoctorProfileDTO createDoctorProfile(DoctorProfileDTO doctorProfileDTO, MultipartFile profilePhoto) {
        DoctorProfile doctorProfile = doctorProfileMapper.toEntity(doctorProfileDTO);

        // Handle file upload
        if (profilePhoto != null && !profilePhoto.isEmpty()) {
            try {
                doctorProfile.setProfilePhoto(profilePhoto.getBytes());
            } catch (IOException e) {
                throw new RuntimeException("Failed to upload profile photo", e);
            }
        }

        doctorProfile.setUniqueId(UUID.randomUUID().toString());
        DoctorProfile savedDoctorProfile = doctorProfileRepository.save(doctorProfile);
        return doctorProfileMapper.toDTO(savedDoctorProfile);
    }

    @Override
    public DoctorProfileDTO updateDoctorProfile(String uniqueId, DoctorProfileDTO doctorProfileDTO, MultipartFile profilePhoto) {
        Optional<DoctorProfile> existingProfile = doctorProfileRepository.findById(uniqueId);

        if (!existingProfile.isPresent()) {
            throw new RuntimeException("Doctor Profile not found");
        }

        DoctorProfile doctorProfile = existingProfile.get();

        // Update fields
        doctorProfile.setFirstName(doctorProfileDTO.getFirstName());
        doctorProfile.setLastName(doctorProfileDTO.getLastName());
        doctorProfile.setAge(doctorProfileDTO.getAge());
        // Update other fields as needed

        // Handle file upload
        if (profilePhoto != null && !profilePhoto.isEmpty()) {
            try {
                doctorProfile.setProfilePhoto(profilePhoto.getBytes());
            } catch (IOException e) {
                throw new RuntimeException("Failed to upload profile photo", e);
            }
        }

        DoctorProfile updatedDoctorProfile = doctorProfileRepository.save(doctorProfile);
        return doctorProfileMapper.toDTO(updatedDoctorProfile);
    }

    @Override
    public DoctorProfileDTO getDoctorProfileById(String uniqueId) {
        DoctorProfile doctorProfile = doctorProfileRepository.findById(uniqueId)
                .orElseThrow(() -> new RuntimeException("Doctor Profile not found"));
        return doctorProfileMapper.toDTO(doctorProfile);
    }

    @Override
    public List<DoctorProfileDTO> getAllDoctorProfiles() {
        List<DoctorProfile> doctorProfiles = doctorProfileRepository.findAll();
        return doctorProfiles.stream().map(doctorProfileMapper::toDTO).collect(Collectors.toList());
    }

    @Override
    public void deleteDoctorProfile(String uniqueId) {
        doctorProfileRepository.deleteById(uniqueId);
    }
}
